[ { "title": "Update Pacman archlinux-keyring", "url": "/posts/arch-linux/", "categories": "readme", "tags": "linux, pacman", "date": "2022-09-09 22:00:00 -0500", "snippet": "Issues updating archlinux-keyring using the following command:sudo pacman-key -Syu archlinux-keyringRequired to reinstall archlinux-keyring. First remove existing key:sudo rm -rf /etc/pacman.d/gnupgThen populate from archlinuxsudo pacman-key --populate archlinuxOutstanding issueerror: cannot remove file &#39;/usr/&#39;: Read-only file system" }, { "title": "Hello World", "url": "/posts/hello-world/", "categories": "readme", "tags": "sample, example", "date": "2022-05-31 21:00:00 -0500", "snippet": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Textconsole.log(&quot;Hello, World!&quot;)" }, { "title": "Kubernetes", "url": "/posts/kubernetes/", "categories": "kubernetes", "tags": "k8s", "date": "2022-05-31 21:00:00 -0500", "snippet": "Install kubernetes controlInstall kubectlbrew install kubectlGet versionkubectl versionRemote into kubernetes podGet pod name:kubectl get podsUse kubectl exec:kubectl exec --stdin --tty &amp;lt;pod name&amp;gt; -- /bin/bashEdit kube contextkubectl config unset takes a dot-delimited path. You can delete cluster/context/user entries by name. For example:kubectl config unset users.&amp;lt;name&amp;gt;kubectl config unset contexts.&amp;lt;context name&amp;gt;kubectl config unset clusters.&amp;lt;clusters name&amp;gt;Manually Generate JobCreate job from existing cronjob:kubectl create job --from=cronjob/[cronjob name] [job name]Clean up:kubectl delete job [job name]LoggingFor convenience, looking across multiple pods of the same deployment use sternbrew install sternstern &amp;lt;service name&amp;gt; --exclude &quot;health|heartbeat&quot;Pod Managementkubectl get pod --field-selector=status.phase==Succeededkubectl delete pod --field-selector=status.phase==Succeeded" }, { "title": "Typescript Jest Mocks", "url": "/posts/ts-jest-mocks/", "categories": "jest", "tags": "typescript, testing", "date": "2021-12-17 08:53:00 -0600", "snippet": "Using mocked to mock out modules:import { mocked } from &quot;ts-jest/utils&quot;import { useContext } from &quot;preact/hooks&quot;import { when } from &quot;jest-when&quot;jest.mock(&quot;preact/hooks&quot;)when(mocked(useContext)).calledWith(value).mockImplementation(() =&amp;gt; ([{ &quot;HTTP_COOKIE({&#39;cookieKey&#39;})]&quot;: &quot;cookie_value&quot;}]))Using mock an overloaded functions from class instance:import { MockProxy, mock } from &quot;jest-mock-extended&quot;import { Clazz } from &quot;dependency&quot;type ClazzFunc = (args: types) =&amp;gt; ReturnTypedescribe(&quot;file&quot;, () =&amp;gt; { let mockClazz: MockProxy&amp;lt;Clazz&amp;gt; beforeEach(() =&amp;gt; { mockClazz = mock&amp;lt;Clazz&amp;gt;() }) it(&quot;test&quot;, () =&amp;gt; { ;(mockClazz.func as ClazzFunc) = jest.fn((args: type) =&amp;gt; { expect(args).toBe(something) return returnData as ReturnType }) })})" }, { "title": "Pipe stdin NodeJS Commander", "url": "/posts/pipe-stdin-node-js/", "categories": "javascript", "tags": "commandline, pipe", "date": "2021-09-15 14:13:00 -0500", "snippet": "fs.readFileSync(process.stdin.fd, &quot;utf-8&quot;)" }, { "title": "Ampersand Substitution", "url": "/posts/ampersand-substitution/", "categories": "vim", "tags": "vim, substitution", "date": "2021-09-15 14:13:00 -0500", "snippet": "Ampersand represents entire matched regex value, so wrapping elements in parentheses is simples/\\v\\w+/(&amp;amp;)/gOr adding conditional logic to JS objects. For example:{ foo: bar}becomes:{ ...(bar &amp;amp;&amp;amp; { foo: bar })}Substitute command:s/\\v\\w+:\\s(\\w+)/...(\\1 \\&amp;amp;\\&amp;amp; { &amp;amp; })/" }, { "title": "Brew Upgrade", "url": "/posts/brew-upgrade/", "categories": "brew", "tags": "brew, upgrade", "date": "2021-08-11 11:36:00 -0500", "snippet": "Upgrading an application installed by Brewbrew updatebrew upgrade [app]Example:brew upgrade kubectl" }, { "title": "Docker", "url": "/posts/docker/", "categories": "docker", "tags": "docker, build", "date": "2021-08-11 11:29:00 -0500", "snippet": "Docker Logindocker login $DOCKER_CONTAINER_REGISTRY -u &amp;lt;user&amp;gt;Docker Engine{ &quot;experimental&quot;: false, &quot;builder&quot;: { &quot;gc&quot;: { &quot;defaultKeepStorage&quot;: &quot;20GB&quot;, &quot;enabled&quot;: true } }, &quot;debug&quot;: true, &quot;registry-mirrors&quot;: [ &quot;$DOCKER_CONTAINER_REGISTRY&quot; ]}Create Networkdocker network create [NETWORK_NAME]Delete Volumesdocker system prune --all --force --volumesDocker kill containerdocker kill [OPTIONS] CONTAINER [CONTAINER...]Build Docker Image and Push to Container RegistryDocker build should include the docker container registry within its tagdocker build . \\ -t $DOCKER_CONTAINER_REGISTRY/$APP_NAME:latest \\ -t $DOCKER_CONTAINER_REGISTRY/$APP_NAME:$(git rev-parse --short HEAD) \\ --build-arg NODE_ENV=productionPush image to container registrydocker push $DOCKER_CONTAINER_REGISTRY/$APP_NAME:$(git rev-parse --short HEAD)Execute Docker Compose binary/scriptdocker compose exec &amp;lt;container&amp;gt; &amp;lt;bin&amp;gt;Inspect Imagedive &amp;lt;image_name&amp;gt;" }, { "title": "Copy String to Clipboard", "url": "/posts/copy-string-to-clipboard/", "categories": "javascript", "tags": "javascript", "date": "2021-07-06 10:08:00 -0500", "snippet": "Function to put string argument onto one’s clipboardconst copyStringToClipboard = (str) =&amp;gt; { // Create new element const el = document.createElement(&#39;textarea&#39;) // Set value (string to be copied) el.value = str // Set non-editable to avoid focus and move outside of view el.setAttribute(&#39;readonly&#39;, &#39;&#39;) el.style = { position: &#39;absolute&#39;, left: &#39;-9999px&#39; } document.body.appendChild(el) // Select text inside element el.select() // Copy text to clipboard document.execCommand(&#39;copy&#39;)}" }, { "title": "jq", "url": "/posts/jq/", "categories": "jq", "tags": "jq", "date": "2021-04-26 11:57:00 -0500", "snippet": "Chaining and mapping:pbpaste | jq &#39;.key | map(select(.nested.obj == &quot;value&quot;))&#39;Filtering and length:cat text.json | jq &#39;map(select((.key &amp;gt; x) and (.key &amp;lt; y))) | length&#39;" }, { "title": "curl", "url": "/posts/curl/", "categories": "curl", "tags": "curl", "date": "2021-04-04 14:47:00 -0500", "snippet": "POST requestcurl --location --request POST &#39;https://host.../path&#39; \\ --header &#39;Authorization: Bearer token&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{ &quot;foo&quot;: &quot;bar&quot; }&#39;Request with timing:curl-format.txttime_namelookup: %{time_namelookup}time_connect: %{time_connect}time_appconnect: %{time_appconnect}time_pretransfer: %{time_pretransfer}time_redirect: %{time_redirect}time_starttransfer: %{time_starttransfer}———time_total: %{time_total}curl -w &quot;@curl-format.txt&quot; -o /dev/null -s http://wordpress.com/FOR-loopfor id in $(cat ids.json | jq -r &#39;.[]&#39;); do curl --location --request GET &#39;https://host/path?id=&#39;$id \\ --header &#39;Authorization: Bearer token&#39;; done" } ]
